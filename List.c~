#include <stdio.h>
#include <stdlib.h>
#include "List.h"

list* list_new(void)
{
   	list *l = (list*) malloc(sizeof(list));

   	if (l != NULL)
   	{
      	st_elem *elem = (st_elem*) malloc(sizeof(st_elem));

		if (elem != NULL)
		{
			elem->data = NULL;
			elem->next = NULL;

			l->head = elem;
			l->tail = elem;
		}
		else
		{
		 	fprintf (stderr, "Memoire insufisante\n");
		 	exit (EXIT_FAILURE);
		}
   	}
   	else
   	{
      	fprintf (stderr, "Memoire insufisante\n");
      	exit (EXIT_FAILURE);
   	}
   	
   	return l;
}


void list_insertHead (list *l, void *data)
{
   	if (l != NULL)
   	{
      	st_elem *new_elem =(st_elem*) malloc(sizeof(st_elem));

      	if (new_elem != NULL)
      	{
         	new_elem->data = data;
         
         	new_elem->next = l->head;
         	l->head = new_elem;
      	}
      	else
      	{
         	fprintf (stderr, "Memoire insuffisante\n");
         	exit (EXIT_FAILURE);
      	}
	}
}


void* getLastElementData(list *l)
{	
	void* value;
	
	if (l != NULL)
	{
		st_elem *current = l->head;
			
		while(current->next != l->tail)
			current = current->next;
		
		value = current->data;
		
		return value;
	}
	return;
}


void list_RemoveLastElem (list *l)
{	
	if (l != NULL)
   	{
   		st_elem *toDel;
   		if(l->head->next != NULL)
   		{
			st_elem *current = l->head;
			
			while(current->next != l->tail)
				current = current->next;	
		
			toDel = current->next;
			current->next = NULL;
			l->tail = current;
		}
		else
		{
			toDel = l->head;
			l->head = l->tail = NULL;
		}

      	free(toDel);
      	toDel = NULL;
   	}
}


void list_delete (list *l)
{
   	if (l != NULL)
   	{
     	while (l->head != l->tail)
      		list_RemoveLastElem(l);
      		
      	free (l);
      	l = NULL;
   	}
}


/*
list* list_new()
{
	list *l = (list*) malloc(sizeof(list));
	l->value = NULL;
	l->next
}

list* list_new(void* v)
{
	list *l = (list*) malloc(sizeof(list));
	
	l->value = v;
	l->next = NULL;
	
	return l;
}

void list_add(list* l, void* v)
{
	list *e, *p;
	
	e = l;
	p = NULL;
	
	while(e != NULL)
	{
		p = e;
		e = e->next;
	}
	
	e = (list_elem*) malloc(sizeof(list_elem));
	e->value = v;
	e->next = NULL;
	
	if(p != NULL)
		p->next = e;
}

void list_del(list *l)
{
	list *e, *n;
	
	if(l == NULL)
		return;
	
	e = l;
	while(e!=NULL)
	{
		n = e->next;
		free(e);
		e = n;
	}
	
	l = NULL;
}

void* list_take_elem(list* l, void* v)
{
	list *e, *n;
	
	if(l == NULL)
		return;
	
	e = l;
	n = e->next;
	
	do
	{
		if(e->value == v)
 			return e;
		n = e->next;
	}while(n != NULL && find != 1);
	 
}
*/



